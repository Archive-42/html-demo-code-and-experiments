<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE technique
  SYSTEM "../../xmlspec.dtd">
<technique id="SL2">
   <short-name>Changing The Visual Focus Indicator in Silverlight</short-name>
   <applicability>
      <p use-id="silverlight.applicability.general"/>
   </applicability>
   <applies-to>
      <success-criterion idref="navigation-mechanisms-focus-visible" relationship="sufficient"/>
   </applies-to>
   <ua-issues>
      <ua-issue use-id="silverlight.ua-issue.general"/>
   </ua-issues>
   <description>
      <p>The objective of this technique is to use the Silverlight "control
    				skinning" scenario and feature set to change the visible focus
    				indication of a control. In particular, the intent is to increase the
    				visibility of focus indication versus the appearance of a default-styled
    				control. This technique is useful both for the control sets that are
    				included in the Silverlight run time or SDK assemblies, as well as
    				for Toolkit or any third party distributed control. </p>
      <p>The default Silverlight core controls all indicate some type of visible
    				focus indication, through their default templates. However, Silverlight
    				application authors can still use the skinning techniques to augment
    				or replace the visible focus indications for controls as used in their
    				applications. For more information on how Silverlight controls will
    				generally supply a default visual focus indicator, see <loc xmlns:xlink="http://www.w3.org/1999/xlink"
              href="https://msdn.microsoft.com/en-us/library/cc903954(VS.95).aspx">Focus
    					Overview on MSDN</loc>. </p>
      <p>Silverlight control skinning is enabled through a deliberate separation
    				of UI and logic in the Silverlight control model. Appearance of a control
    				is largely written in XAML. The logic is largely written in code (for
    				example C#) and is left unaffected when a Silverlight application author
    				provides a new control template "skin". The hooks that connect
    				the appearance and the logic are a <prop>Style</prop> property of the control (which
    				the author changes the value of, to refer to their new XAML resource)
    				and a contract of expected named entities in the XAML. The control
    				logic invokes the names of the entities/parts whenever control state
    				changes, and the expectation is that the named part provides the necessary
    				appearance as defined in XAML. Design tools such as Visual Studio or
    				Expression Blend generate copies of the default templates and parts,
    				such that Silverlight authors can modify the parts that they want to
    				change the appearance of, and still preserve the remainder of default
    				appearance and behavior of the control. </p>
      <p>For the visible focus indicator technique, the author typically modifies
    				a single visual element that renders in layout as an overlay on top
    				of the control when it is focused, and switches the overlay to nonvisible
    				when the control is not focused. This element is a named element that
    				is typically referred to from within the XAML named state Focused,
    				which in turn is hooked up to changes in the visual state. </p>
      <p>Note that this technique assumes that the original control author
    				provided the necessary logic event hookup, and exposed a named state
    				associated with keyboard focus to work with. If this is not the case,
    				or if the scenario is that a Silverlight author is defining their own
    				control, a different technique is needed. See <specref ref="SL7"/>. </p>
      <section id="SL2_focus_in_silverlight">
         <head> Focus in Silverlight </head>
         <p>Focus in Silverlight is equivalent to the larger user interface and
    					application concept of keyboard focus. The element that has focus is
    					the element within the Silverlight object tree and programming model
    					that has first chance to process the Silverlight key events. As a more
    					tangible example that is user-centric, if a <obj>TextBox</obj> has
    					keyboard focus, then when the user presses keys on the keyboard, the
    					characters associated with the user's pressed keys will appear in the
    					TextBox. A user interface element in Silverlight can obtain keyboard
    					focus in one of three ways: </p>
         <olist>
            <item>
               <p> The user uses the Silverlight tab sequence to traverse into the
    					Silverlight content and to focus a specific control. </p>
            </item>
            <item>
               <p> The Silverlight application's logic calls the <function>Focus</function> method
    						programmatically to force focus to a control. </p>
            </item>
            <item>
               <p> The user performs some other action, for example uses the mouse
    							to click on a control. That control's specific logic handles the
    							Silverlight input event and uses that event as stimulus to call <function>Focus</function> on
    							that control. The difference between this case and the above case
    							is that the behavior is typically built-in to that control's runtime
    							behavior, and does not require each application author to call <function>Focus</function> in
    							application code. </p>
            </item>
         </olist>
      </section>
   </description>
   <examples>
      <eg-group>
         <head>Two Button elements, one reskinned to provide new visible
					focus indicator </head>
         <description>
            <p>XAML templates can be verbose; for clarity, only the parts of the
					template that were changed or useful for showing the structure are
					shown. Omitted portions are shown as ellipsis (...). </p>
            <codeblock xml:space="preserve"><![CDATA[<UserControl x:Class="VisibleFocusTemplate.MainPage"
 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
>
 <UserControl.Resources>
   <Style x:Key="StrongFocusIndicator" TargetType="Button">
...
     <Setter Property="Template">
       <Setter.Value>
         <ControlTemplate TargetType="Button">
...
             <VisualStateManager.VisualStateGroups>
               <VisualStateGroup x:Name="FocusStates">
                 <VisualState x:Name="Focused">
                   <Storyboard>
                     <DoubleAnimation Duration="0" To="1"
 Storyboard.TargetProperty="Opacity"
 Storyboard.TargetName="FocusVisualElement"/>
                     <DoubleAnimation Duration="0" To="0.5"
 Storyboard.TargetProperty="(UIElement.Opacity)"
 Storyboard.TargetName="rectangle" d:IsOptimized="True"/>
                   </Storyboard>
                 </VisualState>
                 <VisualState x:Name="Unfocused"/>
               </VisualStateGroup>
             </VisualStateManager.VisualStateGroups>
...
             <Border x:Name="FocusVisualElement"
 IsHitTestVisible="false" Opacity="0"
 CornerRadius="2" BorderBrush="#D0FF0000"
 BorderThickness="4">
               <Rectangle x:Name="rectangle"
 IsHitTestVisible="false" Margin="2"
 Opacity="0" RadiusY="2" RadiusX="2"
 Fill="#A0FF0000"/>
             </Border>
          </ControlTemplate>
       </Setter.Value>
     </Setter>
   </Style>
 </UserControl.Resources>
 <StackPanel x:Name="LayoutRoot">
   <Button Width="275">Default button</Button>
   <Button Width="275"
 Style="{StaticResource StrongFocusIndicator}"
 >Button with re-templated focus visible indicator</Button>
 </StackPanel>
</UserControl>
]]></codeblock>
            <p>The most interesting aspect of this example is the change made to
						the FocusVisualElement part. Here is the original (default template)
						FocusVisualElement: </p>
            <codeblock xml:space="preserve"><![CDATA[<Rectangle x:Name="FocusVisualElement" RadiusX="2" RadiusY="2" Margin="1" Stroke="#FF6DBDD1" StrokeThickness="1" 
 Opacity="0" IsHitTestVisible="false" />
]]></codeblock>
            <p>Here is the changed FocusVisualElement: </p>
            <codeblock xml:space="preserve"><![CDATA[<Border x:Name="FocusVisualElement" IsHitTestVisible="false"
 Opacity="0" CornerRadius="2"
 BorderBrush="#D0FF0000" BorderThickness="4">
 <Rectangle x:Name="rectangle" IsHitTestVisible="false"
 Margin="2" Opacity="0"
 RadiusY="2" RadiusX="2" Fill="#A0FF0000"/>
</Border>
]]></codeblock>
            <p>The following images show how each of the two buttons (default and
						reskinned) appear when focused. </p>
            <p>
               <image>
                  <img xmlns:xlink="http://www.w3.org/1999/xlink"
                       source="/WAI/WCAG20/Techniques/working-examples/SL2/default_button_focus.png"
                       height="57"
                       width="291"/>
                  <alt>Default button focus</alt>
               </image> 
            </p>
            <p>
               <image>
                  <img xmlns:xlink="http://www.w3.org/1999/xlink"
                       source="/WAI/WCAG20/Techniques/working-examples/SL2/reskinned_button_focus.png"
                       height="55"
                       width="294"/>
                  <alt>Reskinned button focus</alt>
               </image> 
            </p>
            <p>This example is shown in operation in the <loc xmlns:xlink="http://www.w3.org/1999/xlink"
                    href="VisibleFocusTemplateTestPage.html"
                    linktype="examples">working example of Visible Focus Template</loc>.</p>
         </description>
      </eg-group>
   </examples>
   <resources>
      <see-also>
         <ulist>
            <item>
               <p>
                  <loc xmlns:xlink="http://www.w3.org/1999/xlink"
                       href="https://msdn.microsoft.com/en-us/library/cc278069(VS.95).aspx">Button
    						Styles and Templates</loc> 
               </p>
            </item>
            <item>
               <p>
                  <loc xmlns:xlink="http://www.w3.org/1999/xlink"
                       href="https://msdn.microsoft.com/en-us/library/cc189093(VS.95).aspx">Customizing
    					the Appearance of an Existing Control by Using a ControlTemplate</loc> 
               </p>
            </item>
            <item>
               <p>
                  <loc xmlns:xlink="http://www.w3.org/1999/xlink"
                       href="https://msdn.microsoft.com/en-us/library/cc903954(VS.95).aspx">Focus
    						Overview</loc> 
               </p>
            </item>
         </ulist>
      </see-also>
   </resources>
   <related-techniques>
      <relatedtech idref="SCR31"/>
   </related-techniques>
   <tests>
      <procedure>
         <p>Note that not all Silverlight applications necessarily will start
    					with the keyboard focus being somewhere within the Silverlight content
    					area for purpose of Step #2. It may be necessary to press TAB several
    					times to traverse the browser's framing user interface. Also, within
    					the browser's display area that displays the HTML document, there might
    					also be other HTML elements that are keyboard focusable, which are
    					representative of HTML that falls lexically before the &lt;object&gt;   tag
    					that instantiates the Silverlight plug-in. So it may also be necessary
    					to press TAB several times until these HTML elements are traversed. </p>
         <olist>
            <item>
               <p> Using a browser that supports Silverlight, open an HTML page that
    					references a Silverlight application through an object tag. </p>
            </item>
            <item>
               <p> Using a keyboard, tab to the element where focus characteristics
    						are being examined. </p>
            </item>
            <item>
               <p> Check that the background, border, or other noticable visual indicator
    							of the element changes color. </p>
            </item>
            <item>
               <p> Check that the changes in color for the background, border, or
    								other noticable visual indicator are removed when the element loses
    								focus. </p>
            </item>
         </olist>
      </procedure>
      <expected-results>
         <p>#3 and #4 are true. </p>
      </expected-results>
   </tests>
   <admin>
      <source>
         <loc xmlns:xlink="http://www.w3.org/1999/xlink"
              href="http://trace.wisc.edu/wcag_wiki/index.php?title=Changing_The_Visual_Focus_Indicator_in_Silverlight"/>
      </source>
   </admin>
</technique>
