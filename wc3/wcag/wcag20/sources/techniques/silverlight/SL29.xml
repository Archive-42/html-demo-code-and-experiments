<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE technique
  SYSTEM "../../xmlspec.dtd">
<technique id="SL29">
   <short-name>Using Silverlight "List" Controls to Define Blocks that
    			can be Bypassed</short-name>
   <applicability>
      <p use-id="silverlight.applicability.general"/>
   </applicability>
   <applies-to>
      <success-criterion idref="navigation-mechanisms-skip" relationship="sufficient"/>
   </applies-to>
   <ua-issues>
      <ua-issue use-id="silverlight.ua-issue.general"/>
   </ua-issues>
   <description>
      <p>The objective of this technique is to use some of the basic user interface
    				objects in Silveright to produce blocks of content that are identified
    				as a "List" to accessibility frameworks and to Silverlight's
    				own tab sequence navigation behavior. </p>
      <p>Using the "List" technique results in a tab sequence behavior
    				whereby that element is treated as a single tab stop, even if that
    				element has consituent elements (the list items) that would otherwise
    				be considered additional tab stops in the main tab sequence. In the
    				default key handling, when the user presses the TAB key while focus
    				is on a List, the focus goes to the next element after the List. To
    				focus the items of the list, the user would press the Arrow keys rather
    				than TAB. In the Silverlight programming model for controls, this tab
    				sequence behavior is expressed by the <prop>TabNavigation</prop> property
    				holding the value of <prop>Once</prop>. The Silverlight <loc xmlns:xlink="http://www.w3.org/1999/xlink"
              href="https://msdn.microsoft.com/en-us/library/system.windows.controls.listbox%28VS.95%29.aspx">ListBox</loc> is
    				a control that reports itself as "List" role, and that has
    				a default <loc xmlns:xlink="http://www.w3.org/1999/xlink"
              href="https://msdn.microsoft.com/en-us/library/system.windows.controls.control.tabnavigation%28VS.95%29.aspx">TabNavigation.Once</loc> value.
    				Thus <loc xmlns:xlink="http://www.w3.org/1999/xlink"
              href="https://msdn.microsoft.com/en-us/library/system.windows.controls.listbox%28VS.95%29.aspx">ListBox</loc> as
    				per this technique is a lightweight technique for producing blocks
    				that can be bypassed. It is specifically a lightweight technique because
    				it can be accomplished by writing simple application-level XAML and
    				using only the Silverlight core libraries. </p>
      <p>Silverlight also supports more full-featured techniques for producing
    				bypass blocks that are based on common user interface features such
    				as menus or toolbars. However, using toolbars in Silverlight is inherently
    				not as lightweight because the Silverlight core libraries themselves
    				do not include a ready-made toolbar. Silverlight provides a <obj>ContextMenu</obj> as
    				part of the Silverlight Toolkit extensions, but the behavior of this
    				particular menu does not easily address the bypass block scenario.
    				Silverlight includes all the infrastructure and necessary base classes
    				for defining a toolbar or a menu that could address the bypass block
    				scenario. Many third-party control implementations of menus and toolbars
    				exist, either as part of control packages that are sold by control
    				vendors, or through community mechanisms such as CodePlex or third-party
    				sites that provide free source code. For some examples, see the following: </p>
      <ulist>
         <item>
            <p> 
               <loc xmlns:xlink="http://www.w3.org/1999/xlink"
                    href="http://demos.telerik.com/silverlight/">http://demos.telerik.com/silverlight/</loc> 
            </p>
         </item>
         <item>
            <p> 
               <loc xmlns:xlink="http://www.w3.org/1999/xlink"
               	href="http://www.componentone.com/Studio/Platform/Silverlight">http://www.componentone.com/Studio/Platform/Silverlight</loc> 
            </p>
         </item>
         <item>
            <p> 
               <loc xmlns:xlink="http://www.w3.org/1999/xlink"
               	href="http://www.vectorlight.net/silverlight/controls">http://www.vectorlight.net/silverlight/controls</loc> 
            </p>
         </item>
      </ulist>
      <p>If application authors use a built-in control such as <loc xmlns:xlink="http://www.w3.org/1999/xlink"
              href="https://msdn.microsoft.com/en-us/library/system.windows.controls.listbox%28VS.95%29.aspx">ListBox</loc> where
    				the accessibility framework reported role is not traditionally associated
    				with a navigation role, it is a best practice to set <prop>AutomationProperties.Name</prop> such
    				that the name informs the user of the purpose of the list control.
    				Otherwise, the role alone leaves this ambiguous. For example, an author
    				might name the list control "Navigation control". </p>
      <p>Often the List control itself is focusable. So long as the List control
    				has a visual focus indicator, that behavior might be acceptable. However,
    				it might provide a better user experience to deliberately have the
    				List itself non-focusable, and instead have focus fall to the first
    				List item when focus reaches that region. Otherwise, the List might
    				be perceived as an "extra" tab stop to some users. To enable
    				that behavior, set <loc xmlns:xlink="http://www.w3.org/1999/xlink"
              href="https://msdn.microsoft.com/en-us/library/system.windows.controls.control.istabstop%28VS.95%29.aspx">IsTabStop</loc> to
    				false on the List control. The List itself still provides the intended
    				tab navigation behavior, and is still reported and identified to accessibility
    				frameworks and assistive technologies, even when the List container
    				is not focusable. This is shown in Example 1, by setting <prop>IsTabStop</prop> as
    				part of a <loc xmlns:xlink="http://www.w3.org/1999/xlink"
              href="https://msdn.microsoft.com/en-us/library/system.windows.style%28VS.95%29.aspx">Style</loc>. </p>
      <p>When an accessibility framework presents a List, assistive technologies
    				are generally expected to continue to support use of the same key behavior
    				as the default behavior, and to report to users that the item is a
    				List when it is focused. If assistive technologies use the accessibility
    				framework APIs for navigation, the items in the list are considered
    				child elements. Navigating either by spatial direction (e.g. NAVDIR_RIGHT
    				in MSAA) or sequential direction (e.g. NAVDIR_NEXT in MSAA) skips the
    				list items and goes to the spatial/next peer. </p>
   </description>
   <examples>
      <eg-group>
         <head>Customize the behavior and appearance of a ListBox to
    					construct a navigation control that can be bypassed</head>
         <description>
            <p>In this example, several properties that influence the items presentation
    						behavior of the Silverlight core control <obj>ListBox</obj> are
    						adjusted to make it suitable for a navigation control. The behavior
    						of this control is that when the tab sequence reaches the control,   "next" or
    						spatial navigation continues on to other controls, rather than through
    						the child controls of the list's items/options. This is enabled and
    						properly reported because <obj>ListBox</obj> reports its accessibility
    						framework role as "List", uses <prop>TabNavigation</prop> = Once as
    						default (because it is the default, <prop>TabNavigation</prop> does not have to
    						be set explicitly in the markup). <obj>ListBox</obj> has default
    						key handling for the arrow keys (to enable traversing the choices in
    						the menu by keyboard-only). The control could also be visually a menu
    						or perhaps other user interface control metaphors, depending on how
    						it is visually templated and composited. Regardless of appearance,
    						the accessibility framework and any assistive technologies based on
    						that framework will treat the control as a "List". This example
    						is templated as a horizontally oriented toolbar-type control. The items
    						in this example are <obj>Button</obj> controls, but could be
    						templated to not appear quite as button-like, or could instead use
    						another focusable control for the items such as a read-only <obj>TextBox</obj>. </p>
            <codeblock xml:space="preserve"><![CDATA[<UserControl x:Class="TabNavigation.MainPage"
   xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
   xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
>
   <StackPanel x:Name="LayoutRoot" Background="White">
       <ListBox AutomationProperties.Name="Navigation Control">
           <ListBox.ItemsPanel>
               <ItemsPanelTemplate>
                   <StackPanel Orientation="Horizontal"/>
               </ItemsPanelTemplate>
           </ListBox.ItemsPanel>
           <ListBox.ItemContainerStyle>
               <Style TargetType="Control">
                   <Setter Property="IsTabStop" Value="False"/>
               </Style>
           </ListBox.ItemContainerStyle>
           <Button>Home</Button>
           <Button>Search</Button>
           <Button>Tools</Button>
           <Button>Help</Button>
       </ListBox>
   </StackPanel>
   <Button>Button here to show a focusable peer control beyond the list</Button>
</UserControl>
]]></codeblock>
            <p>The following is an illustration of what such a control might look
    						like: </p>
            <p>
               <image>
                  <img xmlns:xlink="http://www.w3.org/1999/xlink"
                       source="/WAI/WCAG20/Techniques/working-examples/SL29/listboxbar.png"
                       height="148"
                       width="416"/>
                  <alt>Screen shot of a focusable control beyond a list of buttons</alt>
               </image> 
            </p>
            <p>This example is shown in operation in the <loc xmlns:xlink="http://www.w3.org/1999/xlink"
                    href="TabNavigationTestPage.html"
                    linktype="examples">working example of Tab Navigation</loc>.</p>
         </description>
      </eg-group>
   </examples>
   <resources>
      <see-also>
         <ulist>
            <item>
               <p>
                  <loc xmlns:xlink="http://www.w3.org/1999/xlink"
                       href="https://msdn.microsoft.com/en-us/library/cc903954(VS.95).aspx">Focus
    					Overview</loc> 
               </p>
            </item>
            <item>
               <p>
                  <loc xmlns:xlink="http://www.w3.org/1999/xlink"
                       href="https://msdn.microsoft.com/en-us/library/cc707824(VS.95).aspx">Silverlight
    						Accessibility Overview</loc> 
               </p>
            </item>
         </ulist>
      </see-also>
   </resources>
   <related-techniques>
      <relatedtech idref="SCR28"/>
      <relatedtech idref="G123"/>
      <relatedtech idref="SL25"/>
   </related-techniques>
   <tests>
      <procedure>
         <olist>
            <item>
               <p> Using a browser that supports Silverlight, open an HTML page that
    					references a Silverlight application through an object tag. </p>
            </item>
            <item>
               <p> Press TAB key to traverse typical tab sequence within the Silverlight
    						application. Verify that common areas in the user interface composition
    						("blocks") that are reporting the List role per this technique
    						can be bypassed without having to tab through each constituent part
    						(the "items/children" of the List). </p>
            </item>
            <item>
               <p> Verify that the list children are still accessible by keyboard,
    							by using ARROW keys rather than TAB. </p>
            </item>
            <item>
               <p> Engage an accessibility framework test tool such as UIAVerify.
    								Examine roles in the automation tree, and verify that the List used
    								for bypass behavior reports a combination of name+role that is consistent
    								with the behavior. </p>
            </item>
            <item>
               <p> Use a screen reader to verify that name and role are reported
    									properly. </p>
            </item>
         </olist>
      </procedure>
      <expected-results>
         <p>#2 and #3 are true, and either #4 OR #5 are true. </p>
      </expected-results>
   </tests>
   <admin>
      <source>
         <loc xmlns:xlink="http://www.w3.org/1999/xlink"
              href="http://trace.wisc.edu/wcag_wiki/index.php?title=Using_Silverlight_%22List%22_Controls_to_Define_Blocks_that_can_be_Bypassed"/>
      </source>
   </admin>
</technique>
