<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE technique
  SYSTEM "../../xmlspec.dtd">
<technique id="SL30">
   <short-name>Using Silverlight Control Compositing and AutomationProperties.Name</short-name>
   <applicability>
      <p use-id="silverlight.applicability.general"/>
   </applicability>
   <applies-to>
      <success-criterion idref="text-equiv-all" relationship="sufficient"/>
      <success-criterion idref="ensure-compat-rsv" relationship="sufficient"/>
   </applies-to>
   <ua-issues>
      <ua-issue use-id="silverlight.ua-issue.general"/>
   </ua-issues>
   <description>
      <p>The objective of this technique is to properly apply Silverlight control
    				composition techniques that can present text and non-text in UI as
    				part of the same control. This technique explains the consequences
    				that using control composition has on how that control is reported
    				to the accessibility frameworks that Silverlight supports. </p>
      <p>Silverlight control composition concepts are relevant either to Silverlight
    				developers who define and package a Silverlight control for use by
    				other Silverlight authors, or for Silverlight application authors that
    				use Silverlight controls in their UI but use the content properties
    				of such controls to include several other elements in a composite layout. </p>
      <p>In Silverlight programming and UI definition, Silverlight authors can use control
    				composition to define a parent control that initiates an action. The
    				control can have component parts, such as text and non-text composition
    				pieces that display within the control and have equivalent meaning.
    				Silverlight authors can rely on the text component of the control to
    				provide any text alternative for purposes other than the accessibility
    				framework. However, Silverlight authors should declare alternative
    				text on the control that is specifically consumed by accessibility
    				frameworks, by setting <prop>AutomationProperties.Name</prop> as
    				an attribute in XAML. In most cases, this text can be the same as the
    				visible text in the control composition, per the definition of 'label'
    				in SC 4.1.2. </p>
      <p>Note that this technique does not result in a duplication of text,
    				as explained in <loc xmlns:xlink="http://www.w3.org/1999/xlink"
              href="H2"
              linktype="techniques">H2</loc>.
    				This is because the element parts of control composition are either
    				inherently not focusable separately, or can be specified by instance-specific
    				properties to behave as if they cannot be focused. The parts in Silverlight
    				composition are not promoted to the accessibility frameworks as parts
    				of an application-specific UI Automation tree, so that control composition
    				as an implementation detail does not interfere with the usage of controls
    				by Silverlight application authors. The primary source of accessibility-related
    				information is the specific <prop>AutomationProperties.Name</prop> property
    				as set on the parent control in the composition, which is set by the
    				application author rather than the control author. </p>
      <p>The control author does specify the information that is reported to
    				accessibility frameworks as the "ClassName", which is often
    				used by assistive technologies for identification purposes and is appended
    				to any "Name" value. For example, if an application author
    				includes a   "Widget" control, and gives it an <prop>AutomationProperties.Name</prop> value
    				of "Show Map", an assistive technology might identify the
    				element as   "Show Map widget". The "Show Map" part
    				comes from the application author code, and the "widget" part
    				comes from the Widget control implementation code. </p>
   </description>
   <examples>
      <eg-group>
         <head>Button is composed with a StackPanel that contains nontext
    					and text content</head>
         <description>
            <p>In this example the <obj>TextBlock</obj> that goes with the
    						graphic image conveys the text information for non-accessibility purposes.
    						The <obj>Button</obj> has internal composition that combines
    						text from a non-focusable <obj>TextBlock</obj> part and an image
    						part. Therefore the "Pause" Text is not promoted to serve
    						as "Name" through built-in <obj>Button</obj> automation
    						peer logic. The Silverlight application author is responsible for explicitly
    						setting <prop>AutomationProperties.Name</prop> on the <obj>Button</obj> so
    						that the text equivalent is available to the accessibility framework.
    						This example shows the XAML UI. The logic, which might be attached
    						to <obj>Button</obj> with a <event>Click</event> handler, is
    						not shown. </p>
            <codeblock xml:space="preserve"><![CDATA[ <Button
   Height="20" Width="50" AutomationProperties.Name="Pause" 
 >
   <StackPanel Orientation="Horizontal" >
     <Image Height="12" Width="12" Source="/icon_pause.png"/>
     <TextBlock Text="Pause"/>
   </StackPanel>
 </Button>
]]></codeblock>
            <p>This example is shown in operation in the <loc xmlns:xlink="http://www.w3.org/1999/xlink"
                    href="ButtonNontextTextCompositionTestPage.html"
                    linktype="examples">working example of Button Nontext Text Composition</loc>.</p>
         </description>
      </eg-group>
      <eg-group>
         <head>Button composed, using binding and resource references
    				for strings</head>
         <description>
            <p>This example is similar to Example 1 and produces the same result
    						at run time. This example shows the preferred technique of using the
    						Silverlight data binding and resource features to ensure that the strings
    						for text content and accessibility are the same strings. Also, this
    						gets the strings out of the XAML source and makes them simpler to localize
    						or edit. For more information on using resource strings through binding,
    						see <loc xmlns:xlink="http://www.w3.org/1999/xlink"
                    href="https://msdn.microsoft.com/en-us/library/dd882554%28VS.95%29.aspx">Localizing
    						XAML topic on MSDN</loc>. </p>
            <codeblock xml:space="preserve"><![CDATA[ <Application.Resources>
  <resx:Resources x:Key="UIResourceStrings" />
 </Application.Resources>
  ...
 <Button
   Height="20" Width="50"
   AutomationProperties.Name="{Binding PauseUIString, Source=UIResourceStrings}" />
 >
   <StackPanel Orientation="Horizontal" >
     <Image Height="12" Width="12" Source="/icon_pause.png"/>
     <TextBlock
       Text="{Binding PauseUIString, Source=UIResourceStrings}"/>
   </StackPanel>
 </Button>
]]></codeblock>
         </description>
      </eg-group>
   </examples>
   <resources>
      <see-also>
         <ulist>
            <item>
               <p>
                  <loc xmlns:xlink="http://www.w3.org/1999/xlink"
                       href="https://msdn.microsoft.com/en-us/library/cc645025(VS.95).aspx">Silverlight
    					Layout System</loc> 
               </p>
            </item>
            <item>
               <p>
                  <loc xmlns:xlink="http://www.w3.org/1999/xlink"
                       href="https://msdn.microsoft.com/en-us/library/system.windows.automation.automationproperties.name%28VS.95%29.aspx">AutomationProperties.Name
    					Attached Property</loc> 
               </p>
            </item>
            <item>
               <p>Tools: <loc xmlns:xlink="http://www.w3.org/1999/xlink"
                       href="http://firstfloorsoftware.com/silverlightspy">SilverlightSpy</loc> or <loc xmlns:xlink="http://www.w3.org/1999/xlink"
                       href="http://uiautomationverify.codeplex.com/">UIAVerify</loc> 
               </p>
            </item>
         </ulist>
      </see-also>
   </resources>
   <related-techniques>
      <relatedtech idref="SL18"/>
      <relatedtech idref="H2"/>
   </related-techniques>
   <tests>
      <head>Automation tree verifier</head>
      <procedure>
         <olist>
            <item>
               <p> Using a browser that supports Silverlight, open an HTML page that
    					references a Silverlight application through an object tag. </p>
            </item>
            <item>
               <p> Use a verification tool that is capable of showing the full automation
    						tree, and an objectâ€™s name text alternative as part of the tree.
    						(For example, use UIAVerify or Silverlight Spy; see Resources links.) </p>
            </item>
            <item>
               <p> Check that the <prop>AutomationProperties.Name</prop> appears
    							as the <prop>Name</prop> value for identification in the automation
    							tree, whenever a composite control that has both text and non-text
    							elements is encountered. </p>
            </item>
         </olist>
      </procedure>
      <expected-results>
         <p>#3 is true. </p>
      </expected-results>
   </tests>
   <tests>
      <head>Screen reader</head>
      <procedure>
         <olist>
            <item>
               <p> Using a browser that supports Silverlight, open an HTML page that
    					references a Silverlight application through an object tag. </p>
            </item>
            <item>
               <p> Engage the screen reader. With focus inside the Silverlight content
    						area, press TAB to focus to a composite control where both text and
    						non-text elements are present. </p>
            </item>
            <item>
               <p> Check that the <prop>Name</prop> as applied to the control
    							instance, along with the class name of the control, is read by the
    							screen reader. </p>
            </item>
         </olist>
      </procedure>
      <expected-results>
         <p>#3 is true. </p>
      </expected-results>
   </tests>
   <admin>
      <source>
         <loc xmlns:xlink="http://www.w3.org/1999/xlink"
              href="http://trace.wisc.edu/wcag_wiki/index.php?title=Using_Silverlight_Control_Compositing_and_AutomationProperties.Name"/>
      </source>
   </admin>
</technique>
