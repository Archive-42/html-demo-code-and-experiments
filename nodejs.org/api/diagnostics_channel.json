{
  "type": "module",
  "source": "doc/api/diagnostics_channel.md",
  "modules": [
    {
      "textRaw": "Diagnostics Channel",
      "name": "diagnostics_channel",
      "introduced_in": "v15.1.0",
      "stability": 1,
      "stabilityText": "Experimental",
      "desc": "<p><strong>Source Code:</strong> <a href=\"https://github.com/nodejs/node/blob/v17.1.0/lib/diagnostics_channel.js\">lib/diagnostics_channel.js</a></p>\n<p>The <code>diagnostics_channel</code> module provides an API to create named channels\nto report arbitrary message data for diagnostics purposes.</p>\n<p>It can be accessed using:</p>\n<pre><code class=\"language-mjs\">import diagnostics_channel from 'diagnostics_channel';\n</code></pre>\n<pre><code class=\"language-cjs\">const diagnostics_channel = require('diagnostics_channel');\n</code></pre>\n<p>It is intended that a module writer wanting to report diagnostics messages\nwill create one or many top-level channels to report messages through.\nChannels may also be acquired at runtime but it is not encouraged\ndue to the additional overhead of doing so. Channels may be exported for\nconvenience, but as long as the name is known it can be acquired anywhere.</p>\n<p>If you intend for your module to produce diagnostics data for others to\nconsume it is recommended that you include documentation of what named\nchannels are used along with the shape of the message data. Channel names\nshould generally include the module name to avoid collisions with data from\nother modules.</p>",
      "modules": [
        {
          "textRaw": "Public API",
          "name": "public_api",
          "modules": [
            {
              "textRaw": "Overview",
              "name": "overview",
              "desc": "<p>Following is a simple overview of the public API.</p>\n<pre><code class=\"language-mjs\">import diagnostics_channel from 'diagnostics_channel';\n\n// Get a reusable channel object\nconst channel = diagnostics_channel.channel('my-channel');\n\n// Subscribe to the channel\nchannel.subscribe((message, name) => {\n  // Received data\n});\n\n// Check if the channel has an active subscriber\nif (channel.hasSubscribers) {\n  // Publish data to the channel\n  channel.publish({\n    some: 'data'\n  });\n}\n</code></pre>\n<pre><code class=\"language-cjs\">const diagnostics_channel = require('diagnostics_channel');\n\n// Get a reusable channel object\nconst channel = diagnostics_channel.channel('my-channel');\n\n// Subscribe to the channel\nchannel.subscribe((message, name) => {\n  // Received data\n});\n\n// Check if the channel has an active subscriber\nif (channel.hasSubscribers) {\n  // Publish data to the channel\n  channel.publish({\n    some: 'data'\n  });\n}\n</code></pre>",
              "methods": [
                {
                  "textRaw": "`diagnostics_channel.hasSubscribers(name)`",
                  "type": "method",
                  "name": "hasSubscribers",
                  "meta": {
                    "added": [
                      "v15.1.0",
                      "v14.17.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {boolean} If there are active subscribers",
                        "name": "return",
                        "type": "boolean",
                        "desc": "If there are active subscribers"
                      },
                      "params": [
                        {
                          "textRaw": "`name` {string|symbol} The channel name",
                          "name": "name",
                          "type": "string|symbol",
                          "desc": "The channel name"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Check if there are active subscribers to the named channel. This is helpful if\nthe message you want to send might be expensive to prepare.</p>\n<p>This API is optional but helpful when trying to publish messages from very\nperformance-sensitive code.</p>\n<pre><code class=\"language-mjs\">import diagnostics_channel from 'diagnostics_channel';\n\nif (diagnostics_channel.hasSubscribers('my-channel')) {\n  // There are subscribers, prepare and publish message\n}\n</code></pre>\n<pre><code class=\"language-cjs\">const diagnostics_channel = require('diagnostics_channel');\n\nif (diagnostics_channel.hasSubscribers('my-channel')) {\n  // There are subscribers, prepare and publish message\n}\n</code></pre>"
                },
                {
                  "textRaw": "`diagnostics_channel.channel(name)`",
                  "type": "method",
                  "name": "channel",
                  "meta": {
                    "added": [
                      "v15.1.0",
                      "v14.17.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {Channel} The named channel object",
                        "name": "return",
                        "type": "Channel",
                        "desc": "The named channel object"
                      },
                      "params": [
                        {
                          "textRaw": "`name` {string|symbol} The channel name",
                          "name": "name",
                          "type": "string|symbol",
                          "desc": "The channel name"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>This is the primary entry-point for anyone wanting to interact with a named\nchannel. It produces a channel object which is optimized to reduce overhead at\npublish time as much as possible.</p>\n<pre><code class=\"language-mjs\">import diagnostics_channel from 'diagnostics_channel';\n\nconst channel = diagnostics_channel.channel('my-channel');\n</code></pre>\n<pre><code class=\"language-cjs\">const diagnostics_channel = require('diagnostics_channel');\n\nconst channel = diagnostics_channel.channel('my-channel');\n</code></pre>"
                }
              ],
              "type": "module",
              "displayName": "Overview"
            }
          ],
          "classes": [
            {
              "textRaw": "Class: `Channel`",
              "type": "class",
              "name": "Channel",
              "meta": {
                "added": [
                  "v15.1.0",
                  "v14.17.0"
                ],
                "changes": []
              },
              "desc": "<p>The class <code>Channel</code> represents an individual named channel within the data\npipeline. It is use to track subscribers and to publish messages when there\nare subscribers present. It exists as a separate object to avoid channel\nlookups at publish time, enabling very fast publish speeds and allowing\nfor heavy use while incurring very minimal cost. Channels are created with\n<a href=\"#diagnostics_channelchannelname\"><code>diagnostics_channel.channel(name)</code></a>, constructing a channel directly\nwith <code>new Channel(name)</code> is not supported.</p>",
              "properties": [
                {
                  "textRaw": "`hasSubscribers` Returns: {boolean} If there are active subscribers",
                  "type": "boolean",
                  "name": "return",
                  "meta": {
                    "added": [
                      "v15.1.0",
                      "v14.17.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Check if there are active subscribers to this channel. This is helpful if\nthe message you want to send might be expensive to prepare.</p>\n<p>This API is optional but helpful when trying to publish messages from very\nperformance-sensitive code.</p>\n<pre><code class=\"language-mjs\">import diagnostics_channel from 'diagnostics_channel';\n\nconst channel = diagnostics_channel.channel('my-channel');\n\nif (channel.hasSubscribers) {\n  // There are subscribers, prepare and publish message\n}\n</code></pre>\n<pre><code class=\"language-cjs\">const diagnostics_channel = require('diagnostics_channel');\n\nconst channel = diagnostics_channel.channel('my-channel');\n\nif (channel.hasSubscribers) {\n  // There are subscribers, prepare and publish message\n}\n</code></pre>",
                  "shortDesc": "If there are active subscribers"
                }
              ],
              "methods": [
                {
                  "textRaw": "`channel.publish(message)`",
                  "type": "method",
                  "name": "publish",
                  "meta": {
                    "added": [
                      "v15.1.0",
                      "v14.17.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`message` {any} The message to send to the channel subscribers",
                          "name": "message",
                          "type": "any",
                          "desc": "The message to send to the channel subscribers"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Publish a message to any subscribers to the channel. This will trigger\nmessage handlers synchronously so they will execute within the same context.</p>\n<pre><code class=\"language-mjs\">import diagnostics_channel from 'diagnostics_channel';\n\nconst channel = diagnostics_channel.channel('my-channel');\n\nchannel.publish({\n  some: 'message'\n});\n</code></pre>\n<pre><code class=\"language-cjs\">const diagnostics_channel = require('diagnostics_channel');\n\nconst channel = diagnostics_channel.channel('my-channel');\n\nchannel.publish({\n  some: 'message'\n});\n</code></pre>"
                },
                {
                  "textRaw": "`channel.subscribe(onMessage)`",
                  "type": "method",
                  "name": "subscribe",
                  "meta": {
                    "added": [
                      "v15.1.0",
                      "v14.17.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`onMessage` {Function} The handler to receive channel messages",
                          "name": "onMessage",
                          "type": "Function",
                          "desc": "The handler to receive channel messages",
                          "options": [
                            {
                              "textRaw": "`message` {any} The message data",
                              "name": "message",
                              "type": "any",
                              "desc": "The message data"
                            },
                            {
                              "textRaw": "`name` {string|symbol} The name of the channel",
                              "name": "name",
                              "type": "string|symbol",
                              "desc": "The name of the channel"
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Register a message handler to subscribe to this channel. This message handler\nwill be run synchronously whenever a message is published to the channel. Any\nerrors thrown in the message handler will trigger an <a href=\"process.html#event-uncaughtexception\"><code>'uncaughtException'</code></a>.</p>\n<pre><code class=\"language-mjs\">import diagnostics_channel from 'diagnostics_channel';\n\nconst channel = diagnostics_channel.channel('my-channel');\n\nchannel.subscribe((message, name) => {\n  // Received data\n});\n</code></pre>\n<pre><code class=\"language-cjs\">const diagnostics_channel = require('diagnostics_channel');\n\nconst channel = diagnostics_channel.channel('my-channel');\n\nchannel.subscribe((message, name) => {\n  // Received data\n});\n</code></pre>"
                },
                {
                  "textRaw": "`channel.unsubscribe(onMessage)`",
                  "type": "method",
                  "name": "unsubscribe",
                  "meta": {
                    "added": [
                      "v15.1.0",
                      "v14.17.0"
                    ],
                    "changes": [
                      {
                        "version": "v17.1.0",
                        "pr-url": "https://github.com/nodejs/node/pull/40433",
                        "description": "Added return value. Added to channels without subscribers."
                      }
                    ]
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {boolean} `true` if the handler was found, `false` otherwise.",
                        "name": "return",
                        "type": "boolean",
                        "desc": "`true` if the handler was found, `false` otherwise."
                      },
                      "params": [
                        {
                          "textRaw": "`onMessage` {Function} The previous subscribed handler to remove",
                          "name": "onMessage",
                          "type": "Function",
                          "desc": "The previous subscribed handler to remove"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Remove a message handler previously registered to this channel with\n<a href=\"#channelsubscribeonmessage\"><code>channel.subscribe(onMessage)</code></a>.</p>\n<pre><code class=\"language-mjs\">import diagnostics_channel from 'diagnostics_channel';\n\nconst channel = diagnostics_channel.channel('my-channel');\n\nfunction onMessage(message, name) {\n  // Received data\n}\n\nchannel.subscribe(onMessage);\n\nchannel.unsubscribe(onMessage);\n</code></pre>\n<pre><code class=\"language-cjs\">const diagnostics_channel = require('diagnostics_channel');\n\nconst channel = diagnostics_channel.channel('my-channel');\n\nfunction onMessage(message, name) {\n  // Received data\n}\n\nchannel.subscribe(onMessage);\n\nchannel.unsubscribe(onMessage);\n</code></pre>"
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "Public API"
        }
      ],
      "type": "module",
      "displayName": "Diagnostics Channel"
    }
  ]
}